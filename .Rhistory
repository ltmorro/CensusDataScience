rm(list = ls())
library(ggplot2)
library(ggplot2)
library(gridExtra)
library(boot)
currentDir <- getwd()
dataDir <- 'data'
if (!file.exists(dataDir)){
dir.create(file.path(currentDir, dataDir))
} else {
print ("Directory already exists")
}
trainFile <- file.path(currentDir, dataDir, "train.csv")
trainURL <- 'http://archive.ics.uci.edu/ml/machine-learning-databases/adult/adult.data'
download.file(trainURL, trainFile)
testFile <- file.path(currentDir, dataDir, "test.csv")
testURL <- "http://archive.ics.uci.edu/ml/machine-learning-databases/adult/adult.test"
download.file(testURL, testFile)
train <- read.csv(trainFile, header=FALSE)
names(train) <- c("age","workclass","fnlwgt","education","education.num","marital.status","occupation","relationship","race","sex","capital.gain","capital.loss","hours.per.week","native.country","income")
summary(train)
test <- read.csv(testFile, header=FALSE, skip=1) #remove the line with "|1x3 Cross validator"
names(test) <- c("age","workclass","fnlwgt","education","education.num","marital.status","occupation","relationship","race","sex","capital.gain","capital.loss","hours.per.week","native.country","income")
summary(test)
agePlot <- ggplot(train, aes(x=age)) + geom_histogram(aes(y=..count../sum(..count..)), binwidth=3, color="darkblue", fill="lightblue") + ylab("percentage")
wgtPlot <- ggplot(train, aes(x=fnlwgt)) + geom_histogram(aes(y=..count../sum(..count..)), color="darkblue", fill="lightblue") + ylab("percentage")
educationNumPlot <- ggplot(train, aes(x=education.num)) + geom_histogram(aes(y=..count../sum(..count..)), color="darkblue", fill="lightblue") + ylab("percentage")
capGainPlot <- ggplot(train, aes(x=capital.gain)) + geom_histogram(aes(y=..count../sum(..count..)), color="darkblue", fill="lightblue") + ylab("percentage")
capLossPlot <- ggplot(train, aes(x=capital.loss)) + geom_histogram(aes(y=..count../sum(..count..)), color="darkblue", fill="lightblue") + ylab("percentage")
hoursPlot <- ggplot(train, aes(x=hours.per.week)) + geom_histogram(aes(y=..count../sum(..count..)), color="darkblue", fill="lightblue") + ylab("percentage")
grid.arrange(agePlot, wgtPlot, educationNumPlot, capGainPlot, capLossPlot, hoursPlot, ncol=2)
ageIncomePlot <- ggplot(train, aes(x=income, y=age)) + geom_boxplot(color="darkblue", fill="lightblue")
wgtIncomePlot <- ggplot(train, aes(x=income, y=fnlwgt)) + geom_boxplot(color="darkblue", fill="lightblue")
educationNumIncomePlot <- ggplot(train, aes(x=income, y=education.num)) + geom_boxplot(color="darkblue", fill="lightblue")
hoursIncomePlot <- ggplot(train, aes(x=income, y=hours.per.week)) + geom_boxplot(color="darkblue", fill="lightblue")
grid.arrange(ageIncomePlot, wgtIncomePlot, educationNumIncomePlot, hoursIncomePlot, ncol=2)
workPlot <- ggplot(train, aes(x=workclass)) + geom_bar(aes(y=..count../sum(..count..)), color="darkblue", fill="lightblue") + ylab("percentage") + coord_flip()
educationPlot <- ggplot(train, aes(x=education)) + geom_bar(aes(y=..count../sum(..count..)), color="darkblue", fill="lightblue") + ylab("percentage") + coord_flip()
maritalPlot <- ggplot(train, aes(x=marital.status)) + geom_bar(aes(y=..count../sum(..count..)), color="darkblue", fill="lightblue") + ylab("percentage") + coord_flip()
occupationPlot <- ggplot(train, aes(x=occupation)) + geom_bar(aes(y=..count../sum(..count..)), color="darkblue", fill="lightblue") + ylab("percentage") + coord_flip()
relationshipPlot <- ggplot(train, aes(x=relationship)) + geom_bar(aes(y=..count../sum(..count..)), color="darkblue", fill="lightblue") + ylab("percentage") + coord_flip()
racePlot <- ggplot(train, aes(x=race)) + geom_bar(aes(y=..count../sum(..count..)), color="darkblue", fill="lightblue") + ylab("percentage") + coord_flip()
sexPlot <- ggplot(train, aes(x=sex)) + geom_bar(aes(y=..count../sum(..count..)), color="darkblue", fill="lightblue") + ylab("percentage") + coord_flip()
nativePlot <- ggplot(train, aes(x=native.country)) + geom_bar(aes(y=..count../sum(..count..)), color="darkblue", fill="lightblue") + ylab("percentage") + coord_flip()
grid.arrange(workPlot, educationPlot, maritalPlot, occupationPlot, relationshipPlot, racePlot, sexPlot, nativePlot, ncol=2)
workIncomePlot <- ggplot(train, aes(x=workclass, y=..count../sum(..count..), fill=workclass))+ geom_bar(aes(fill=income)) + scale_fill_manual(values=c("darkblue", "lightblue")) + ylab("percentage") + coord_flip()
maritalIncomePlot <- ggplot(train, aes(x=marital.status, y=..count../sum(..count..), fill=workclass))+ geom_bar(aes(fill=income)) + scale_fill_manual(values=c("darkblue", "lightblue")) + ylab("percentage") + coord_flip()
occupationIncomePlot<- ggplot(train, aes(x=occupation, y=..count../sum(..count..), fill=workclass))+ geom_bar(aes(fill=income)) + scale_fill_manual(values=c("darkblue", "lightblue")) + ylab("percentage") + coord_flip()
relationshipIncomePlot<- ggplot(train, aes(x=relationship, y=..count../sum(..count..), fill=workclass))+ geom_bar(aes(fill=income)) + scale_fill_manual(values=c("darkblue", "lightblue")) + ylab("percentage") + coord_flip()
raceIncomePlot <- ggplot(train, aes(x=race, y=..count../sum(..count..), fill=workclass))+ geom_bar(aes(fill=income)) + scale_fill_manual(values=c("darkblue", "lightblue")) + ylab("percentage") + coord_flip()
sexIncomePlot <- ggplot(train, aes(x=sex, y=..count../sum(..count..), fill=workclass))+ geom_bar(aes(fill=income)) + scale_fill_manual(values=c("darkblue", "lightblue")) + ylab("percentage") + coord_flip()
grid.arrange(workIncomePlot, maritalIncomePlot, occupationIncomePlot, relationshipIncomePlot, raceIncomePlot, sexIncomePlot, ncol=2)
m <- glm(income ~ age + education.num + hours.per.week + workclass + marital.status + occupation + relationship + race + sex, family=binomial("logit"), data=train)
sum <- summary(m)$coefficients
sort <- order(sum[,4])
sum <- sum[sort,]
sum
pred.probs <- predict(m, test, type="response")
pred.income <- rep(" <=50K.", length(test$income))
pred.income[pred.probs >= .5] <- " >50K."
error.rate <- mean(pred.income != test$income)
error.rate
confusion.matrix <- table(test$income, pred.income)
print(addmargins(confusion.matrix))
accuracy <- sum(diag(confusion.matrix)) / length(test$income)
accuracy
x <- model.matrix(income~.,train)
View(train)
y <- ifelse(train$income==" <=50K.", 1, 0)
cv.out <- cv.glmnet(x,y,alpha=1,family="binomial",type.measure = "mse" )
library(glmnet)
install.packages("glmnet")
cv.out <- cv.glmnet(x,y,alpha=1,family="binomial",type.measure = "mse" )
library(boot)
library(glmnet)
cv.out <- cv.glmnet(x,y,alpha=1,family="binomial",type.measure = "mse" )
y <- ifelse(train$income==" <=50K.",0,1)
cv.out <- cv.glmnet(x,y,alpha=1,family="binomial",type.measure = "mse" )
x <- model.matrix(income~.,train)
y <- ifelse(train$income==" <=50K.",0,1)
cv.out <- cv.glmnet(x,y,alpha=1,family="binomial",type.measure = "mse" )
summary(y)
head(y)
y <- ifelse(train$income=="<=50K",0,1)
head(y)
summary(y)
summary(train$income)
y <- ifelse(train$income==" <=50K",0,1)
summary(y)
cv.out <- cv.glmnet(x,y,alpha=1,family="binomial",type.measure = "mse" )
plot(cv.out)
lambdaMin <- cv.out$lambda.min
lambda1se <- cv.out$lambda.1se
lambda1se
coef(cv.out,s=lambda1se)
x_test<- model.matrix(income~., test)
lasso.probs <- predict(cv.out, newx=x_test,s=lambda1se, type="response")
lasso.probs <- predict(cv.out, newx=x_test,s=lambda1se, type="response")
lasso.probs <- predict(cv.out, newx=x_test,s=lambda1se, type="response")
lasso.income <- rep(" <=50K.", length(test$income))
lasso.income[lasso.probs >= .5] <- " >50K."
lasso.probs <- predict(cv.out, newx=x_test,s=lambda1se, type="response")
x_test<- model.matrix(income~.,test)
lasso.probs <- predict(cv.out, newx=x_test,s=lambda1se, type="response")
dim(x)
dim(x_test)
View(x_test)
View(x)
View(x_test)
summary(x_test)
dimnames(x)
dimnames(x_test)
colnames(x)
colnames(x_test)
x_test$native.country
x_test$native.country$China
x_text[native.country]
x_test[native.country]
View(x_test)
type(x_test)
Type(x)
x
clear
clear()
mode(x)
x[4,]
x[,3]
x_test[,1:74]
holand <- rep(0, 16281)
x_test[,75:100]
x_test <- cbind(x_test[,1:74], holand, x_test[,75:100])
lasso.probs <- predict(cv.out, newx=x_test,s=lambda1se, type="response")
lasso.income <- rep(" <=50K.", length(test$income))
lasso.income[lasso.probs >= .5] <- " >50K."
error.rate <- mean(lasso.income != test$income)
error.rate
confusion.matrix <- table(test$income, lasso.income)
print(addmargins(confusion.matrix))
accuracy <- sum(diag(confusion.matrix)) / length(test$income)
accuracy
confusion.matrix <- table(test$income, pred.income)
print(addmargins(confusion.matrix))
accuracy <- sum(diag(confusion.matrix)) / length(test$income)
accuracy
m <- glm(income ~ age + education.num + hours.per.week + workclass + marital.status + occupation + relationship + race + sex, family=binomial("logit"), data=train)
sum <- summary(m)$coefficients
sort <- order(sum[,4])
sum <- sum[sort,]
sum
x <- model.matrix(income~.,train)
y <- ifelse(train$income==" <=50K",0,1)
cv.out <- cv.glmnet(x,y,alpha=1,family="binomial", type.measure = "mse")
plot(cv.out)
lambda1se <- cv.out$lambda.1se
coef(cv.out,s=lambda1se)
x_test<- model.matrix(income~.,test)
holand <- rep(0, 16281)
x_test <- cbind(x_test[,1:74], holand, x_test[,75:100])
lasso.probs <- predict(cv.out, newx=x_test,s=lambda1se, type="response")
lasso.income <- rep(" <=50K.", length(test$income))
lasso.income[lasso.probs >= .5] <- " >50K."
error.rate <- mean(lasso.income != test$income)
error.rate
confusion.matrix <- table(test$income, lasso.income)
print(addmargins(confusion.matrix))
accuracy <- sum(diag(confusion.matrix)) / length(test$income)
accuracy
coef(cv.out,s=lambda1se)
print(addmargins(confusion.matrix))
accuracy <- sum(diag(confusion.matrix)) / length(test$income)
accuracy
error.rate <- mean(lasso.income != test$income)
error.rate
agePlot <- ggplot(train, aes(x=age)) + geom_histogram(aes(y=..count../sum(..count..)), binwidth=3, color="darkblue", fill="lightblue") + ylab("percentage")
wgtPlot <- ggplot(train, aes(x=fnlwgt)) + geom_histogram(aes(y=..count../sum(..count..)), color="darkblue", fill="lightblue") + ylab("percentage")
educationNumPlot <- ggplot(train, aes(x=education.num)) + geom_histogram(aes(y=..count../sum(..count..)), color="darkblue", fill="lightblue") + ylab("percentage")
capGainPlot <- ggplot(train, aes(x=capital.gain)) + geom_histogram(aes(y=..count../sum(..count..)), color="darkblue", fill="lightblue") + ylab("percentage")
capLossPlot <- ggplot(train, aes(x=capital.loss)) + geom_histogram(aes(y=..count../sum(..count..)), color="darkblue", fill="lightblue") + ylab("percentage")
hoursPlot <- ggplot(train, aes(x=hours.per.week)) + geom_histogram(aes(y=..count../sum(..count..)), color="darkblue", fill="lightblue") + ylab("percentage")
grid.arrange(agePlot, wgtPlot,ncol=2)
png(filename="ageFnlwgt.png",
type="cairo",
units="in",
width=5,
height=4,
pointsize=12,
res=96)
install.packages("Cairo")
png(filename="ageFnlwgt.png",
type="cairo",
units="in",
width=5,
height=4,
pointsize=12,
res=96)
install.packages("Cairo")
png(filename="ageFnlwgt.png",
type="cairo",
units="in",
width=5,
height=4,
pointsize=12,
res=96)
fgrid.arrange(agePlot, wgtPlot,ncol=2)
dev.off()
png(filename="ageFnlwgt.png",
type="cairo",
units="in",
width=5,
height=4,
pointsize=12,
res=96)
fgrid.arrange(agePlot, wgtPlot,ncol=2)
dev.off()
grid.arrange(educationNumPlot, capGainPlot, ncol=2)
